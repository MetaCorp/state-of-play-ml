[{"D:\\Documents\\Projects\\state-of-play-ml\\image-classifier\\src\\reportWebVitals.js":"1","D:\\Documents\\Projects\\state-of-play-ml\\image-classifier\\src\\App.js":"2","D:\\Documents\\Projects\\state-of-play-ml\\image-classifier\\src\\Steps.js":"3","D:\\Documents\\Projects\\state-of-play-ml\\image-classifier\\src\\index.js":"4"},{"size":362,"mtime":1606814181023,"results":"5","hashOfConfig":"6"},{"size":10219,"mtime":1611456392174,"results":"7","hashOfConfig":"6"},{"size":396,"mtime":1611211348314,"results":"8","hashOfConfig":"6"},{"size":500,"mtime":1606814181023,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"f2zzno",{"filePath":"12","messages":"13","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"14"},{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\Documents\\Projects\\state-of-play-ml\\image-classifier\\src\\reportWebVitals.js",[],"D:\\Documents\\Projects\\state-of-play-ml\\image-classifier\\src\\App.js",["19","20","21","22","23","24","25","26","27","28","29","30","31"],"import React, { useState, useEffect } from 'react';\n\nimport * as tf from '@tensorflow/tfjs';\nimport * as knnClassifier from '@tensorflow-models/knn-classifier';\nimport './App.css';\n\nimport Steps from './Steps'\n\nimport GetAppIcon from '@material-ui/icons/GetApp';\nimport IconButton from '@material-ui/core/IconButton';\n\nimport { saveAs } from 'file-saver';\n\nconst mobilenet = require('@tensorflow-models/mobilenet');\n\nconst { getFilesFromDataTransferItems } = require('datatransfer-files-promise')\n\n\n\nconst App = () => {\n\n  const [knn, setKnn] = useState(null);\n  const [net, setNet] = useState(null);\n\n  const [tagList, setTagList] = useState([]);\n  const [tags, setTags] = useState({});\n  const [datasetLoading, setDatasetLoading] = useState(false);\n\n  const [isTraining, setIsTraining] = useState(false);\n  const [isTrained, setIsTrained] = useState(false);\n\n  const [results, setResults] = useState([]);\n  const [resultLoading, setResultLoading] = useState(false);\n\n  const [step, setStep] = useState(0);\n\n  const [imageCount, setImageCount] = useState(0);\n  const [imageTotal, setImageTotal] = useState(null);\n\n  const [steps, setSteps] = useState([{\n    step: \"Loading model...\"\n  }, {\n    step: \"Drop a folder containing the dataset\",\n  }, {\n    step: \"Loading...\",\n  }, {\n    step: \"Training...\",\n    // progress: imageCount / imageTotal * 100\n  }, {\n    step: \"Finding best K...\"\n  }, {\n    step: \"Drop an image\",\n  }]);\n\n  \n\n  useEffect(() => {\n    setKnn(knnClassifier.create())\n    const loadNet = async () => {\n      setNet(await mobilenet.load())\n      setStep(1)\n    }\n    loadNet()\n  }, []);\n\n  const handleDatasetDrop = e => {\n    e.preventDefault()\n    e.stopPropagation()\n\n    if (step < 1) return\n\n    if (isTrained) {\n      handleImageDrop(e)\n    }\n    else {\n      handleDatasetLoad(e)\n    }\n  }\n\n  const handleDatasetLoad = async e => {\n    setStep(2)\n    setDatasetLoading(true)\n\n    const tagList = []\n    const tags = {}\n\n    console.log('files 1', e.dataTransfer.files)\n    const files = await getFilesFromDataTransferItems(e.dataTransfer.items)\n    console.log('files 2', files)\n    const imageFiles = files.filter(file => file.type === \"image/jpeg\")\n    setImageTotal(imageFiles.length)\n    imageFiles.forEach((file, i) => {\n      const tag = file.filepath.substring(file.filepath.indexOf('/') + 1, file.filepath.lastIndexOf('/'))\n      \n      if (!tagList.includes(tag)) {\n        tagList.push(tag)\n        tags[tag] = []\n      }\n\n      tags[tag].push(file)\n\n    })\n\n    console.log({ tagList, tags })\n\n    setDatasetLoading(false)\n    setTagList(tagList)\n    setTags(tags)\n    \n    handleTrain(tagList, tags)// to override state that are not yet updated\n  }\n  \n  const handleLoadImageFromFile = (file) => new Promise((res, rej) => {\n    // console.log({ file })\n    var imgEl = document.createElement('img');\n    var reader  = new FileReader();\n    \n    reader.onload = function() {\n      imgEl.src = reader.result;\n      imgEl.onload = function() {\n        // access image size here \n        imgEl.width = this.width\n        imgEl.height = this.height\n\n        // console.log({ file2: file })\n\n        res(imgEl)\n      };\n\n      // TODO : reject on error\n      \n    };\n\n    reader.onerror = function(event) {\n      console.log('REJECT: ', reader.error)\n      rej(reader.error)\n      reader.abort();\n    };\n\n    \n    reader.addEventListener('abort', () => {\n      console.log('REJECT: ')\n      rej()\n      console.error(`Error occurred reading file: ${file.name}`);\n    });\n\n    reader.readAsDataURL(file);\n  })\n  \n  const handleTrain = (tagList, tags) => {\n    setStep(3)\n    setIsTraining(true)\n\n    // console.log({ tagList, tags })\n\n    console.log('tags count: ' + tagList.length)\n\n    let tagLoadedCount = 0\n    tagList.map((tag, i) => {\n\n      console.log()\n      console.log(tag + ' :')\n      \n      let imageCount = 0\n      \n      tags[tag].map(async (file) => {\n\n        const imgEl = await handleLoadImageFromFile(file)\n\n        // console.log({ tag, imageCount, imgEl })\n\n        if (imgEl) {\n          // console.log({ tag, files: tags[tag], file, imageCount, tagLoadedCount })\n  \n          // Get image data from video element\n          const image = tf.browser.fromPixels(imgEl);\n  \n          // 'conv_preds' is the logits activation of MobileNet.\n          const activation = net.infer(image, true);// 'conv_preds');\n      \n          // Add current image to classifier\n          knn.addExample(activation, i)\n      \n          // Dispose image when done\n          image.dispose();\n          activation.dispose();\n  \n          \n        }\n\n        // setImageCount(imageCount + 1)\n        imageCount++\n        // console.log({ imageCount })\n\n        if (imageCount === tags[tag].length) {\n          console.log('training ' + tag + ' done')\n          tagLoadedCount++\n          console.log('tagLoadedCount: ' + tagLoadedCount + '/' + tagList.length)\n\n          if (tagLoadedCount === tagList.length) {\n            setIsTraining(false)\n            setIsTrained(true)\n            handleFindBestK(tagList, tags)\n\n          }\n        }\n\n      })\n    })\n  }\n\n  const getConfidences = (tagList, result) => {\n    \n    const confidenceList = []\n    const confidences = {};\n\n    Object.keys(result.confidences).map(function(key) {\n      confidenceList.push(tagList[key])\n      confidences[tagList[key]] = result.confidences[key];\n    });\n\n    confidenceList.sort((a, b) => confidences[b] - confidences[a])\n\n    return {\n      confidenceList,\n      confidences\n    }\n  }\n\n  // - results\n  //   - tags\n  //     - Bar\n  //     - files\n  //       - Porte.jpg\n  //       - results\n\n  const handleFindBestK = async (tagList, tags) => {\n    setStep(4)\n\n    const K_COUNT = 15\n\n    const results = []\n\n    for (let i = 0; i < tagList.length; i++) {\n      const tag = tagList[i];\n\n      console.log('finding best k for ' + tag)\n    \n      results.push({\n        tag,\n        files: []\n      })\n\n      for (let j = 0; j < tags[tag].length && j < 40; j++) {\n        const file = tags[tag][j];\n        \n        const imgEl = await handleLoadImageFromFile(file)\n\n        const image = tf.browser.fromPixels(imgEl);\n\n        const activation = net.infer(image, 'conv_preds');\n\n        results[i].files.push({\n          filename: file.name,\n          results: []\n        })\n\n        for (let l = 1; l <= K_COUNT; l++) {\n\n          let k\n          const result = await knn.predictClass(\n            activation,\n            k = l\n          );\n          \n          const { confidenceList, confidences } = getConfidences(tagList, result)\n          \n          results[i].files[j].results.push({\n            confidenceList,\n            confidences\n          })\n          \n        }\n\n        image.dispose();\n        activation.dispose();\n\n      }\n\n    }\n\n    console.log({ results })\n\n    const parsedResults = []\n\n    for (let m = 1; m <= K_COUNT; m++) {\n      let total = 0\n      let count = 0\n\n      results.map(r => {\n        r.files.map(file => {\n\n          // console.log({ filterdConfidenceList: file.results[m - 1].confidenceList.filter(tag => file.results[m - 1].confidences[tag] > 0)})\n\n          if (file.results[m - 1].confidenceList.filter(tag => file.results[m - 1].confidences[tag] > 0).includes(r.tag)) {\n            \n            // console.log({ index: file.results[m - 1].confidenceList.indexOf(r.tag) })\n\n            total += (file.results[m - 1].confidenceList.length - file.results[m - 1].confidenceList.indexOf(r.tag)) / file.results[m - 1].confidenceList.length\n          }\n          \n          count++\n        })\n      })\n\n      console.log({ total, count })\n      \n      parsedResults.push(total / count)\n    }\n\n    console.log({ parsedResults })\n\n    setStep(5)\n\n  }\n\n  const handleImageDrop = async e => {\n    if (step < 5) return\n\n    setResultLoading(true)\n    setStep(step + 1)\n    setSteps([\n      ...steps, {\n        step: \"Loading predictions...\",\n      }\n    ])\n\n    const imgEl = await handleLoadImageFromFile(e.dataTransfer.files[0])\n\n    // Get image data from video element\n    const image = tf.browser.fromPixels(imgEl);\n\n    // 'conv_preds' is the logits activation of MobileNet.\n    const activation = net.infer(image, 'conv_preds');\n\n    let k\n    const result = await knn.predictClass(\n      activation,\n      k = 1\n    );\n\n    const { confidenceList, confidences } = getConfidences(tagList, result)\n    \n    console.log('predict result: ', {\n      label: tagList[result.classIndex],\n      confidences,\n      confidenceList,\n      result\n    })\n\n    \n    setStep(step + 1)\n    setSteps([\n      ...steps, {\n        step: <span>\n          <span>Prédictions :</span>\n          <ul>\n            {confidenceList.filter(confidence => confidences[confidence] >= 0.1).map(tag => <li key={tag}>{tag + ' : ' + confidences[tag]}</li>)}\n          </ul>\n        </span>,\n      }\n    ])\n    setResults([\n      ...results, {\n        label: tagList[result.classIndex],\n        confidences,\n        confidenceList\n      }\n    ])\n\n    // Dispose image when done\n    image.dispose();\n    activation.dispose();\n    \n    setResultLoading(false)\n    // await sleep(100);\n  }\n\n  const handleExport = () => {\n    let dataset = knn.getClassifierDataset()\n    var datasetObj = {}\n    Object.keys(dataset).forEach((key) => {\n      let data = dataset[key].dataSync();\n      // use Array.from() so when JSON.stringify() it covert to an array string e.g [0.1,-0.2...] \n      // instead of object e.g {0:\"0.1\", 1:\"-0.2\"...}\n      datasetObj[key] = Array.from(data); \n    });\n    let jsonStr = JSON.stringify(datasetObj)\n    //can be change to other source\n    const filename = 'model.json'\n\n    var fileToSave = new Blob([jsonStr], {\n      type: 'application/json',\n      name: filename\n    });\n    \n    // Save the file\n    saveAs(fileToSave, filename);\n  }\n\n  return (\n    <div className=\"App\" onDragOver={e => e.preventDefault()} onDrop={handleDatasetDrop}>\n      {step > 3 && <IconButton style={{ position: 'fixed', top: 20, right: 20, color: 'white' }} onClick={handleExport} >\n        <GetAppIcon />\n      </IconButton>}\n      <header className=\"App-header\">\n        <Steps\n          items={steps}\n          step={step}\n          />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","D:\\Documents\\Projects\\state-of-play-ml\\image-classifier\\src\\Steps.js",[],"D:\\Documents\\Projects\\state-of-play-ml\\image-classifier\\src\\index.js",[],{"ruleId":"32","severity":1,"message":"33","line":26,"column":10,"nodeType":"34","messageId":"35","endLine":26,"endColumn":14},{"ruleId":"32","severity":1,"message":"36","line":27,"column":10,"nodeType":"34","messageId":"35","endLine":27,"endColumn":24},{"ruleId":"32","severity":1,"message":"37","line":29,"column":10,"nodeType":"34","messageId":"35","endLine":29,"endColumn":20},{"ruleId":"32","severity":1,"message":"38","line":33,"column":10,"nodeType":"34","messageId":"35","endLine":33,"endColumn":23},{"ruleId":"32","severity":1,"message":"39","line":37,"column":10,"nodeType":"34","messageId":"35","endLine":37,"endColumn":20},{"ruleId":"32","severity":1,"message":"40","line":37,"column":22,"nodeType":"34","messageId":"35","endLine":37,"endColumn":35},{"ruleId":"32","severity":1,"message":"41","line":38,"column":10,"nodeType":"34","messageId":"35","endLine":38,"endColumn":20},{"ruleId":"42","severity":1,"message":"43","line":159,"column":26,"nodeType":"44","messageId":"45","endLine":159,"endColumn":28},{"ruleId":"42","severity":1,"message":"46","line":217,"column":41,"nodeType":"47","messageId":"45","endLine":217,"endColumn":49},{"ruleId":"32","severity":1,"message":"48","line":273,"column":13,"nodeType":"34","messageId":"35","endLine":273,"endColumn":14},{"ruleId":"42","severity":1,"message":"43","line":300,"column":21,"nodeType":"44","messageId":"45","endLine":300,"endColumn":23},{"ruleId":"42","severity":1,"message":"43","line":301,"column":26,"nodeType":"44","messageId":"45","endLine":301,"endColumn":28},{"ruleId":"32","severity":1,"message":"48","line":349,"column":7,"nodeType":"34","messageId":"35","endLine":349,"endColumn":8},"no-unused-vars","'tags' is assigned a value but never used.","Identifier","unusedVar","'datasetLoading' is assigned a value but never used.","'isTraining' is assigned a value but never used.","'resultLoading' is assigned a value but never used.","'imageCount' is assigned a value but never used.","'setImageCount' is assigned a value but never used.","'imageTotal' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","Array.prototype.map() expects a return value from function.","FunctionExpression","'k' is assigned a value but never used."]